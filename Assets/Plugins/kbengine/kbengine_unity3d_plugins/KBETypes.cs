/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;



	// defined in */scripts/entity_defs/types.xml

	public struct UINT8
	{
		Byte value;

		UINT8(Byte value)
		{
			this.value = value;
		}

		public static implicit operator Byte(UINT8 value)
		{
			return value.value;
		}

		public static implicit operator UINT8(Byte value)
		{
			Byte tvalue = (Byte)value;
			return new UINT8(tvalue);
		}

		public static Byte MaxValue
		{
			get
			{
				return Byte.MaxValue;
			}
		}

		public static Byte MinValue
		{
			get
			{
				return Byte.MinValue;
			}
		}
	}

	public struct UINT16
	{
		UInt16 value;

		UINT16(UInt16 value)
		{
			this.value = value;
		}

		public static implicit operator UInt16(UINT16 value)
		{
			return value.value;
		}

		public static implicit operator UINT16(UInt16 value)
		{
			UInt16 tvalue = (UInt16)value;
			return new UINT16(tvalue);
		}

		public static UInt16 MaxValue
		{
			get
			{
				return UInt16.MaxValue;
			}
		}

		public static UInt16 MinValue
		{
			get
			{
				return UInt16.MinValue;
			}
		}
	}

	public struct UINT64
	{
		UInt64 value;

		UINT64(UInt64 value)
		{
			this.value = value;
		}

		public static implicit operator UInt64(UINT64 value)
		{
			return value.value;
		}

		public static implicit operator UINT64(UInt64 value)
		{
			UInt64 tvalue = (UInt64)value;
			return new UINT64(tvalue);
		}

		public static UInt64 MaxValue
		{
			get
			{
				return UInt64.MaxValue;
			}
		}

		public static UInt64 MinValue
		{
			get
			{
				return UInt64.MinValue;
			}
		}
	}

	public struct UINT32
	{
		UInt32 value;

		UINT32(UInt32 value)
		{
			this.value = value;
		}

		public static implicit operator UInt32(UINT32 value)
		{
			return value.value;
		}

		public static implicit operator UINT32(UInt32 value)
		{
			UInt32 tvalue = (UInt32)value;
			return new UINT32(tvalue);
		}

		public static UInt32 MaxValue
		{
			get
			{
				return UInt32.MaxValue;
			}
		}

		public static UInt32 MinValue
		{
			get
			{
				return UInt32.MinValue;
			}
		}
	}

	public struct INT8
	{
		SByte value;

		INT8(SByte value)
		{
			this.value = value;
		}

		public static implicit operator SByte(INT8 value)
		{
			return value.value;
		}

		public static implicit operator INT8(SByte value)
		{
			SByte tvalue = (SByte)value;
			return new INT8(tvalue);
		}

		public static SByte MaxValue
		{
			get
			{
				return SByte.MaxValue;
			}
		}

		public static SByte MinValue
		{
			get
			{
				return SByte.MinValue;
			}
		}
	}

	public struct INT16
	{
		Int16 value;

		INT16(Int16 value)
		{
			this.value = value;
		}

		public static implicit operator Int16(INT16 value)
		{
			return value.value;
		}

		public static implicit operator INT16(Int16 value)
		{
			Int16 tvalue = (Int16)value;
			return new INT16(tvalue);
		}

		public static Int16 MaxValue
		{
			get
			{
				return Int16.MaxValue;
			}
		}

		public static Int16 MinValue
		{
			get
			{
				return Int16.MinValue;
			}
		}
	}

	public struct INT32
	{
		Int32 value;

		INT32(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(INT32 value)
		{
			return value.value;
		}

		public static implicit operator INT32(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new INT32(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct INT64
	{
		Int64 value;

		INT64(Int64 value)
		{
			this.value = value;
		}

		public static implicit operator Int64(INT64 value)
		{
			return value.value;
		}

		public static implicit operator INT64(Int64 value)
		{
			Int64 tvalue = (Int64)value;
			return new INT64(tvalue);
		}

		public static Int64 MaxValue
		{
			get
			{
				return Int64.MaxValue;
			}
		}

		public static Int64 MinValue
		{
			get
			{
				return Int64.MinValue;
			}
		}
	}

	public struct STRING
	{
		string value;

		STRING(string value)
		{
			this.value = value;
		}

		public static implicit operator string(STRING value)
		{
			return value.value;
		}

		public static implicit operator STRING(string value)
		{
			string tvalue = (string)value;
			return new STRING(tvalue);
		}
	}

	public struct UNICODE
	{
		string value;

		UNICODE(string value)
		{
			this.value = value;
		}

		public static implicit operator string(UNICODE value)
		{
			return value.value;
		}

		public static implicit operator UNICODE(string value)
		{
			string tvalue = (string)value;
			return new UNICODE(tvalue);
		}
	}

	public struct FLOAT
	{
		float value;

		FLOAT(float value)
		{
			this.value = value;
		}

		public static implicit operator float(FLOAT value)
		{
			return value.value;
		}

		public static implicit operator FLOAT(float value)
		{
			float tvalue = (float)value;
			return new FLOAT(tvalue);
		}

		public static float MaxValue
		{
			get
			{
				return float.MaxValue;
			}
		}

		public static float MinValue
		{
			get
			{
				return float.MinValue;
			}
		}
	}

	public struct DOUBLE
	{
		double value;

		DOUBLE(double value)
		{
			this.value = value;
		}

		public static implicit operator double(DOUBLE value)
		{
			return value.value;
		}

		public static implicit operator DOUBLE(double value)
		{
			double tvalue = (double)value;
			return new DOUBLE(tvalue);
		}

		public static double MaxValue
		{
			get
			{
				return double.MaxValue;
			}
		}

		public static double MinValue
		{
			get
			{
				return double.MinValue;
			}
		}
	}

	public struct PYTHON
	{
		byte[] value;

		PYTHON(byte[] value)
		{
			this.value = value;
		}

		public static implicit operator byte[](PYTHON value)
		{
			return value.value;
		}

		public static implicit operator PYTHON(byte[] value)
		{
			byte[] tvalue = (byte[])value;
			return new PYTHON(tvalue);
		}

		public Byte this[int ID]
		{
			get { return value[ID]; }
			set { this.value[ID] = value; }
		}
	}

	public struct PY_DICT
	{
		byte[] value;

		PY_DICT(byte[] value)
		{
			this.value = value;
		}

		public static implicit operator byte[](PY_DICT value)
		{
			return value.value;
		}

		public static implicit operator PY_DICT(byte[] value)
		{
			byte[] tvalue = (byte[])value;
			return new PY_DICT(tvalue);
		}

		public Byte this[int ID]
		{
			get { return value[ID]; }
			set { this.value[ID] = value; }
		}
	}

	public struct PY_TUPLE
	{
		byte[] value;

		PY_TUPLE(byte[] value)
		{
			this.value = value;
		}

		public static implicit operator byte[](PY_TUPLE value)
		{
			return value.value;
		}

		public static implicit operator PY_TUPLE(byte[] value)
		{
			byte[] tvalue = (byte[])value;
			return new PY_TUPLE(tvalue);
		}

		public Byte this[int ID]
		{
			get { return value[ID]; }
			set { this.value[ID] = value; }
		}
	}

	public struct PY_LIST
	{
		byte[] value;

		PY_LIST(byte[] value)
		{
			this.value = value;
		}

		public static implicit operator byte[](PY_LIST value)
		{
			return value.value;
		}

		public static implicit operator PY_LIST(byte[] value)
		{
			byte[] tvalue = (byte[])value;
			return new PY_LIST(tvalue);
		}

		public Byte this[int ID]
		{
			get { return value[ID]; }
			set { this.value[ID] = value; }
		}
	}

	public struct ENTITYCALL
	{
		byte[] value;

		ENTITYCALL(byte[] value)
		{
			this.value = value;
		}

		public static implicit operator byte[](ENTITYCALL value)
		{
			return value.value;
		}

		public static implicit operator ENTITYCALL(byte[] value)
		{
			byte[] tvalue = (byte[])value;
			return new ENTITYCALL(tvalue);
		}

		public Byte this[int ID]
		{
			get { return value[ID]; }
			set { this.value[ID] = value; }
		}
	}

	public struct BLOB
	{
		byte[] value;

		BLOB(byte[] value)
		{
			this.value = value;
		}

		public static implicit operator byte[](BLOB value)
		{
			return value.value;
		}

		public static implicit operator BLOB(byte[] value)
		{
			byte[] tvalue = (byte[])value;
			return new BLOB(tvalue);
		}

		public Byte this[int ID]
		{
			get { return value[ID]; }
			set { this.value[ID] = value; }
		}
	}

	public struct VECTOR2
	{
		Vector2 value;

		VECTOR2(Vector2 value)
		{
			this.value = value;
		}

		public static implicit operator Vector2(VECTOR2 value)
		{
			return value.value;
		}

		public static implicit operator VECTOR2(Vector2 value)
		{
			Vector2 tvalue = (Vector2)value;
			return new VECTOR2(tvalue);
		}

		public float x
		{
			get { return value.x; }
			set { this.value.x = value; }
		}

		public float y
		{
			get { return value.y; }
			set { this.value.y = value; }
		}

	}

	public struct VECTOR3
	{
		Vector3 value;

		VECTOR3(Vector3 value)
		{
			this.value = value;
		}

		public static implicit operator Vector3(VECTOR3 value)
		{
			return value.value;
		}

		public static implicit operator VECTOR3(Vector3 value)
		{
			Vector3 tvalue = (Vector3)value;
			return new VECTOR3(tvalue);
		}

		public float x
		{
			get { return value.x; }
			set { this.value.x = value; }
		}

		public float y
		{
			get { return value.y; }
			set { this.value.y = value; }
		}

		public float z
		{
			get { return value.z; }
			set { this.value.z = value; }
		}

	}

	public struct VECTOR4
	{
		Vector4 value;

		VECTOR4(Vector4 value)
		{
			this.value = value;
		}

		public static implicit operator Vector4(VECTOR4 value)
		{
			return value.value;
		}

		public static implicit operator VECTOR4(Vector4 value)
		{
			Vector4 tvalue = (Vector4)value;
			return new VECTOR4(tvalue);
		}

		public float x
		{
			get { return value.x; }
			set { this.value.x = value; }
		}

		public float y
		{
			get { return value.y; }
			set { this.value.y = value; }
		}

		public float z
		{
			get { return value.z; }
			set { this.value.z = value; }
		}

		public float w
		{
			get { return value.w; }
			set { this.value.w = value; }
		}
	}

	public struct OBJECT_ID
	{
		Int32 value;

		OBJECT_ID(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(OBJECT_ID value)
		{
			return value.value;
		}

		public static implicit operator OBJECT_ID(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new OBJECT_ID(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct BOOL
	{
		Byte value;

		BOOL(Byte value)
		{
			this.value = value;
		}

		public static implicit operator Byte(BOOL value)
		{
			return value.value;
		}

		public static implicit operator BOOL(Byte value)
		{
			Byte tvalue = (Byte)value;
			return new BOOL(tvalue);
		}

		public static Byte MaxValue
		{
			get
			{
				return Byte.MaxValue;
			}
		}

		public static Byte MinValue
		{
			get
			{
				return Byte.MinValue;
			}
		}
	}

	public struct CONTROLLER_ID
	{
		Int32 value;

		CONTROLLER_ID(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(CONTROLLER_ID value)
		{
			return value.value;
		}

		public static implicit operator CONTROLLER_ID(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new CONTROLLER_ID(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct EXPERIENCE
	{
		Int32 value;

		EXPERIENCE(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(EXPERIENCE value)
		{
			return value.value;
		}

		public static implicit operator EXPERIENCE(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new EXPERIENCE(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct ITEM_ID
	{
		Int32 value;

		ITEM_ID(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(ITEM_ID value)
		{
			return value.value;
		}

		public static implicit operator ITEM_ID(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new ITEM_ID(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct SKILLID
	{
		Int32 value;

		SKILLID(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(SKILLID value)
		{
			return value.value;
		}

		public static implicit operator SKILLID(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new SKILLID(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct QUESTID
	{
		Int32 value;

		QUESTID(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(QUESTID value)
		{
			return value.value;
		}

		public static implicit operator QUESTID(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new QUESTID(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct DBID
	{
		UInt64 value;

		DBID(UInt64 value)
		{
			this.value = value;
		}

		public static implicit operator UInt64(DBID value)
		{
			return value.value;
		}

		public static implicit operator DBID(UInt64 value)
		{
			UInt64 tvalue = (UInt64)value;
			return new DBID(tvalue);
		}

		public static UInt64 MaxValue
		{
			get
			{
				return UInt64.MaxValue;
			}
		}

		public static UInt64 MinValue
		{
			get
			{
				return UInt64.MinValue;
			}
		}
	}

	public struct UID
	{
		UInt64 value;

		UID(UInt64 value)
		{
			this.value = value;
		}

		public static implicit operator UInt64(UID value)
		{
			return value.value;
		}

		public static implicit operator UID(UInt64 value)
		{
			UInt64 tvalue = (UInt64)value;
			return new UID(tvalue);
		}

		public static UInt64 MaxValue
		{
			get
			{
				return UInt64.MaxValue;
			}
		}

		public static UInt64 MinValue
		{
			get
			{
				return UInt64.MinValue;
			}
		}
	}

	public struct UID1
	{
		byte[] value;

		UID1(byte[] value)
		{
			this.value = value;
		}

		public static implicit operator byte[](UID1 value)
		{
			return value.value;
		}

		public static implicit operator UID1(byte[] value)
		{
			byte[] tvalue = (byte[])value;
			return new UID1(tvalue);
		}

		public Byte this[int ID]
		{
			get { return value[ID]; }
			set { this.value[ID] = value; }
		}
	}

	public struct ENTITY_ID
	{
		Int32 value;

		ENTITY_ID(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(ENTITY_ID value)
		{
			return value.value;
		}

		public static implicit operator ENTITY_ID(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new ENTITY_ID(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct ENTITY_NO
	{
		UInt32 value;

		ENTITY_NO(UInt32 value)
		{
			this.value = value;
		}

		public static implicit operator UInt32(ENTITY_NO value)
		{
			return value.value;
		}

		public static implicit operator ENTITY_NO(UInt32 value)
		{
			UInt32 tvalue = (UInt32)value;
			return new ENTITY_NO(tvalue);
		}

		public static UInt32 MaxValue
		{
			get
			{
				return UInt32.MaxValue;
			}
		}

		public static UInt32 MinValue
		{
			get
			{
				return UInt32.MinValue;
			}
		}
	}

	public struct SPACE_ID
	{
		UInt32 value;

		SPACE_ID(UInt32 value)
		{
			this.value = value;
		}

		public static implicit operator UInt32(SPACE_ID value)
		{
			return value.value;
		}

		public static implicit operator SPACE_ID(UInt32 value)
		{
			UInt32 tvalue = (UInt32)value;
			return new SPACE_ID(tvalue);
		}

		public static UInt32 MaxValue
		{
			get
			{
				return UInt32.MaxValue;
			}
		}

		public static UInt32 MinValue
		{
			get
			{
				return UInt32.MinValue;
			}
		}
	}

	public struct POSITION3D
	{
		Vector3 value;

		POSITION3D(Vector3 value)
		{
			this.value = value;
		}

		public static implicit operator Vector3(POSITION3D value)
		{
			return value.value;
		}

		public static implicit operator POSITION3D(Vector3 value)
		{
			Vector3 tvalue = (Vector3)value;
			return new POSITION3D(tvalue);
		}

		public float x
		{
			get { return value.x; }
			set { this.value.x = value; }
		}

		public float y
		{
			get { return value.y; }
			set { this.value.y = value; }
		}

		public float z
		{
			get { return value.z; }
			set { this.value.z = value; }
		}

	}

	public struct DIRECTION3D
	{
		Vector3 value;

		DIRECTION3D(Vector3 value)
		{
			this.value = value;
		}

		public static implicit operator Vector3(DIRECTION3D value)
		{
			return value.value;
		}

		public static implicit operator DIRECTION3D(Vector3 value)
		{
			Vector3 tvalue = (Vector3)value;
			return new DIRECTION3D(tvalue);
		}

		public float x
		{
			get { return value.x; }
			set { this.value.x = value; }
		}

		public float y
		{
			get { return value.y; }
			set { this.value.y = value; }
		}

		public float z
		{
			get { return value.z; }
			set { this.value.z = value; }
		}

	}

	public struct ENTITY_UTYPE
	{
		UInt32 value;

		ENTITY_UTYPE(UInt32 value)
		{
			this.value = value;
		}

		public static implicit operator UInt32(ENTITY_UTYPE value)
		{
			return value.value;
		}

		public static implicit operator ENTITY_UTYPE(UInt32 value)
		{
			UInt32 tvalue = (UInt32)value;
			return new ENTITY_UTYPE(tvalue);
		}

		public static UInt32 MaxValue
		{
			get
			{
				return UInt32.MaxValue;
			}
		}

		public static UInt32 MinValue
		{
			get
			{
				return UInt32.MinValue;
			}
		}
	}

	public struct DAMAGE_TYPE
	{
		Int32 value;

		DAMAGE_TYPE(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(DAMAGE_TYPE value)
		{
			return value.value;
		}

		public static implicit operator DAMAGE_TYPE(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new DAMAGE_TYPE(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct ENMITY
	{
		Int32 value;

		ENMITY(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(ENMITY value)
		{
			return value.value;
		}

		public static implicit operator ENMITY(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new ENMITY(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct HP
	{
		Int32 value;

		HP(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(HP value)
		{
			return value.value;
		}

		public static implicit operator HP(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new HP(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct MP
	{
		Int32 value;

		MP(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(MP value)
		{
			return value.value;
		}

		public static implicit operator MP(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new MP(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public struct ENTITY_STATE
	{
		SByte value;

		ENTITY_STATE(SByte value)
		{
			this.value = value;
		}

		public static implicit operator SByte(ENTITY_STATE value)
		{
			return value.value;
		}

		public static implicit operator ENTITY_STATE(SByte value)
		{
			SByte tvalue = (SByte)value;
			return new ENTITY_STATE(tvalue);
		}

		public static SByte MaxValue
		{
			get
			{
				return SByte.MaxValue;
			}
		}

		public static SByte MinValue
		{
			get
			{
				return SByte.MinValue;
			}
		}
	}

	public struct ENTITY_SUBSTATE
	{
		Byte value;

		ENTITY_SUBSTATE(Byte value)
		{
			this.value = value;
		}

		public static implicit operator Byte(ENTITY_SUBSTATE value)
		{
			return value.value;
		}

		public static implicit operator ENTITY_SUBSTATE(Byte value)
		{
			Byte tvalue = (Byte)value;
			return new ENTITY_SUBSTATE(tvalue);
		}

		public static Byte MaxValue
		{
			get
			{
				return Byte.MaxValue;
			}
		}

		public static Byte MinValue
		{
			get
			{
				return Byte.MinValue;
			}
		}
	}

	public struct ENTITY_FORBIDS
	{
		Int32 value;

		ENTITY_FORBIDS(Int32 value)
		{
			this.value = value;
		}

		public static implicit operator Int32(ENTITY_FORBIDS value)
		{
			return value.value;
		}

		public static implicit operator ENTITY_FORBIDS(Int32 value)
		{
			Int32 tvalue = (Int32)value;
			return new ENTITY_FORBIDS(tvalue);
		}

		public static Int32 MaxValue
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public static Int32 MinValue
		{
			get
			{
				return Int32.MinValue;
			}
		}
	}

	public class ENTITY_FORBID_COUNTER : List<SByte>
	{

	}

	public class ENTITYID_LIST : List<Int32>
	{

	}

	public class AVATAR_DATA
	{
		public SByte param1 = 0;
		public byte[] param2 = new byte[0];

	}

	public class AVATAR_INFOS
	{
		public UInt64 dbid = 0;
		public string name = "";
		public Byte roleType = 0;
		public UInt16 level = 0;
		public AVATAR_DATA data = new AVATAR_DATA();

	}

	public class AVATAR_INFOS_LIST
	{
		public List<AVATAR_INFOS> values = new List<AVATAR_INFOS>();

	}

	public class BAG
	{
		public List<List<Int64>> values22 = new List<List<Int64>>();

	}

	public class EXAMPLES
	{
		public Int64 k1 = 0;
		public Int64 k2 = 0;

	}


}